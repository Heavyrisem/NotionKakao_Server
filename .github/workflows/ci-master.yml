name: CI-master

on:
  push:
    branches: [ master ]
env:
  DOCKER_IMAGE: ghcr.io/heavyrisem/notionkakao_server
  VERSION: ${{ github.sha }}

jobs:

  
  test:
    name: Jest
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.5.1
        with:
          node-version: 17

      - name: install dependencies
        run: yarn install

      - name: initialize environments
        run: |
            echo "NOTION_TOKEN=${{ secrets.NOTION_TOKEN }}" >> $GITHUB_ENV
            echo "DB_ID=${{ secrets.DB_ID }}" >> $GITHUB_ENV
            
      - name: Jest Unit test
        run:  yarn test

  build:
    needs: test
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
        shell: bash
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, ubuntu-server ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Docker run
        run: |
          docker ps -q --filter "name=NotionKakao_Server" | grep -q . && docker stop NotionKakao_Server && docker rm -fv NotionKakao_Server
          docker run -d -p 8000:3000 --name NotionKakao_Server -e NOTION_TOKEN=${{ secrets.NOTION_TOKEN }} -e DB_ID=${{ secrets.DB_ID }} --restart always ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
          
  cleanup:
    needs: [ build, deploy ]
    name: Clean up docker images
    runs-on: [ self-hosted, development ]
    steps:
      -   name: Clean up docker images
          run:
            docker rmi $(docker images --filter "before=${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}" --filter=reference="${{ env.DOCKER_IMAGE }}:*" -q)

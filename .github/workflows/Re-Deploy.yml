name: Re-Deploy
on:
    workflow_dispatch:
        inputs:
            tags:
                type: string
                description: 'Target image version'
                required: true
env:
    DOCKER_NAME: notionkakao_server
    DOCKER_IMAGE: ghcr.io/heavyrisem/notionkakao_server

jobs:
    cleanup:
        name: Clean up docker images
        runs-on: [self-hosted, ubuntu-server]
        steps:
            - name: Clean up docker images
              run: |
                  docker ps -q --filter "name=${{ env.DOCKER_NAME }}" | grep -q . && docker stop ${{ env.DOCKER_NAME }} && docker rm -fv ${{ env.DOCKER_NAME }}
                  runningImages=$(docker images --filter=reference="${{ env.DOCKER_IMAGE }}:*" --format {{.ID}} -q)
                  if [ ! -z $runningImages ]; then docker rmi $(docker images --filter=reference="${{ env.DOCKER_IMAGE }}:*" --format {{.ID}} -q); fi

    build:
        needs: cleanup
        name: Build
        runs-on: ubuntu-latest
        steps:
            - name: Check out source code
              uses: actions/checkout@v2
              with:
                  ref: refs/tags/${{ github.event.inputs.tags }}

            - name: Set up docker buildx
              id: buildx
              uses: docker/setup-buildx-action@v1
              # run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

            # - name: Cache docker layers
            #   uses: actions/cache@v2
            #   with:
            #       path: /tmp/.buildx-cache
            #       key: ${{ runner.os }}-buildx-${{ github.event.inputs.tags }}
            #       restore-keys: |
            #           ${{ runner.os }}-buildx-

            - name: Login to ghcr
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GHCR_PAT }}

            - name: Build and push
              id: docker_build
              uses: docker/build-push-action@v2
              with:
                  builder: ${{ steps.buildx.outputs.name }}
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.tags }}

    deploy:
        needs: build
        name: Deploy
        runs-on: [self-hosted, ubuntu-server]
        steps:
            - name: Login to ghcr
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GHCR_PAT }}

            - name: initialize environments
                run: |
                    rm -rf .env
                    echo "NOTION_TOKEN=${{ secrets.NOTION_TOKEN }}" >> .env
                    echo "DB_ID=${{ secrets.DB_ID }}" >> .env

            - name: Docker run
              run: docker run -d -p 8001:3000 --name ${{ env.DOCKER_NAME }} --env-file=.env --restart always ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.tags }}

    discordMessage:
        needs: deploy
        name: Send Message to Discord
        runs-on: ubuntu-latest
        steps:
            - name: Discord notification
              env:
                  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
              uses: Ilshidur/action-discord@master
              with:
                  args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} ${{ github.event.inputs.tags }} has been deployed.'
